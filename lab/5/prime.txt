        .ORIG x3000
        JSR   JUDGE
        HALT

; judge subroutine: R1 = R0.isPrime()
JUDGE   ST    R7, SaveR7
        AND   R1, R1, #0
        ADD   R1, R1, #1  ; R1 = 1
        NOT   R2, R0
        ADD   R2, R2, #1  ; R2 = -R0
        AND   R3, R3, #0
        ADD   R3, R3, #2  ; R3 = 2
AGAIN   JSR   SQUARE
        ADD   R4, R4, R2  ; R4 = R4 - R0
        BRp   DONE
MODULE  ADD   R4, R2, #0
AGAINm  ADD   R4, R4, R3
        BRn   AGAINm
        BRz   BAD
        ADD   R3, R3, #1
        BRnzp AGAIN
BAD     AND   R1, R1, #0
DONE    LD    R7, SaveR7
        RET

; square subroutine: R4 = R3 * R3
SQUARE  ST    R1, SaveR1
        AND   R1, R1, #0
        ADD   R1, R1, #1  ; R1 = 1
        ST    R2, SaveR2
        ADD   R5, R3, #0
        ADD   R6, R3, #0
        ST    R3, SaveR3
        AND   R4, R4, #0
AGAINs  AND   R2, R1, R5
        BRnp  BitOne
        ADD   R6, R6, R6
        ADD   R1, R1, R1
        BRnzp AGAINs
BitOne  ADD   R4, R4, R6
        ADD   R6, R6, R6
        ADD   R1, R1, R1
        ADD   R3, R5, #-1
        AND   R5, R5, R3
        BRnp  AGAINs
        LD    R1, SaveR1
        LD    R2, SaveR2
        LD    R3, SaveR3
        RET
SaveR1  .BLKW #1
SaveR2  .BLKW #1
SaveR3  .BLKW #1
SaveR7  .BLKW #1
        .END